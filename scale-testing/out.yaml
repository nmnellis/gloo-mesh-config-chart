---
# Source: scale-testing/templates/namespaces.yaml
apiVersion: v1
kind: Namespace
metadata:
  labels:
    istio-injection: enabled
  name: ns-1
spec: {}
---
# Source: scale-testing/templates/service-accounts.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: app-1
  namespace: app-1
---
# Source: scale-testing/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: app-1
  namespace: ns-1
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
    - port: 8083
      targetPort: grpc
      protocol: TCP
      name: grpc
  selector:
    app: app-1
---
# Source: scale-testing/templates/deployments.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-1
  namespace: ns-1
  labels:
    app: app-1
    soa.indeed.com/isolated-env: infra
spec:
  replicas: 0
  selector:
    matchLabels:
      app: app-1
      soa.indeed.com/isolated-env: infra
  template:
    metadata:
      labels:
        app: app-1
        soa.indeed.com/isolated-env: infra
    spec:
      serviceAccountName: app-1
      securityContext:
        runAsUser: 65534
        runAsGroup: 65534
      containers:
      - name: main
        image: gcr.io/istio-release/app:1.19.3
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
        - name: grpc
          containerPort: 8083
        args:
          - --port
          - "8080"
          - --grpc
          - "8083"
          - --version
          - v1
          - --cluster
          - cluster-1
---
# Source: scale-testing/templates/namespaces.yaml
# create all the namespaces because we will create workspaces for them
---
# Source: scale-testing/templates/trim-proxy-config-policy.yaml
## TODO needs import/export and any other config missed
---
# Source: scale-testing/templates/workspace.yaml
# Default one
---
# Source: scale-testing/templates/workspace.yaml
# They will always create the workspaces before all the namespaces exist
---
# Source: scale-testing/templates/access-policy.yaml
## TODO Add correct configuration for this. 
## PERMISSIVE MODE FOR 8080
## STRICT FOR 8083 with workspace boundaries
apiVersion: security.policy.gloo.solo.io/v2
kind: AccessPolicy
metadata:
  name: productpage-destination
  namespace: ns-1
spec:
  applyToDestinations:
  - selector:
      labels:
        app: app-1
  config:
    authn:
      tlsMode: DISABLE
---
# Source: scale-testing/templates/header-manipulation-policy.yaml
apiVersion: trafficcontrol.policy.gloo.solo.io/v2
kind: HeaderManipulationPolicy
metadata:
  name: modify-header-hsts
  name: ns-1
spec:
  applyToRoutes:
  - route:
      labels:
        soa.indeed.com/route-table: top-level
  config:
    appendRequestHeaders:
      x-custom-request: bookinfo
    appendResponseHeaders:
      strict-transport-security: max-age=16070400; includeSubDomains
      x-content-type-options: nosniff
      x-frame-options: deny
      x-custom-response: bookinfo
    removeRequestHeaders:
      - user-agent
    removeResponseHeaders:
      - x-server
      - x-envoy-upstream-service-time
---
# Source: scale-testing/templates/outlier-detection.yaml
apiVersion: resilience.policy.gloo.solo.io/v2
kind: OutlierDetectionPolicy
metadata:
  name: outlier-detection-soa-default
  namespace: ns-1
spec:
  applyToDestinations:
    - kind: VIRTUAL_DESTINATION
      selector: {}
  config:
    baseEjectionTime: 30s
    # TODO: There isn't a way to separate 5xx and gateway failures in this config.
    # Apparently 0 does nothing too.
    # Does not handle gateway failures differently from 5xx
    consecutiveErrors: 0
    consecutiveGatewayErrors: 5 # Not implemented yet. Not a %
    interval: 10s
    maxEjectionPercent: 50
---
# Source: scale-testing/templates/retry-timeout.yaml
apiVersion: resilience.policy.gloo.solo.io/v2
kind: RetryTimeoutPolicy
metadata:
  name: default-indeed-retry
  namespace: ns-1
spec:
  applyToRoutes:
    - route:
        labels:
          route: default-route-with-retry # matches on route table route's labels
  config:
    requestTimeout: 15s
    retries:
      attempts: 3
      perTryTimeout: 15s # Defaults to whatever envoy default is.
      # retryOn specifies the conditions under which retry takes place. One or more policies can be specified using a ‘,’ delimited list.
      retryOn: "connect-failure,refused-stream"
      # retryRemoteLocalities specifies whether the retries should retry to other localities, will default to false
      retryRemoteLocalities: true
---
# Source: scale-testing/templates/retry-timeout.yaml
apiVersion: resilience.policy.gloo.solo.io/v2
kind: RetryTimeoutPolicy
metadata:
  name: idempotent-retry-policy
  namespace: ns-1
spec:
  applyToRoutes:
    - route:
        labels:
          route: default-5xx-retry # matches on route table route's labels
  config:
    requestTimeout: 15s
    retries:
      attempts: 3
      perTryTimeout: 2s # Defaults to the route timeout
      # retryOn specifies the conditions under which retry takes place. One or more policies can be specified using a ‘,’ delimited list.
      retryOn: "connect-failure,refused-stream,gateway-error,reset"
      # retryRemoteLocalities specifies whether the retries should retry to other localities, will default to false
      retryRemoteLocalities: true
---
# Source: scale-testing/templates/route-table.yaml
apiVersion: networking.gloo.solo.io/v2
kind: RouteTable
metadata:
 name: indeed-top-level-route-table
 namespace: ns-1
spec:
 hosts:
   - "*.grpc-mesh-1-gloo.service.mesh"
 http:
   - labels:
       soa.indeed.com/route-table: top-level
     delegate:
       routeTables:
         - labels:
             soa.indeed.com/route-table: grpc-mesh-1
       sortMethod: TABLE_WEIGHT
 workloadSelectors:
   - {}
---
# Source: scale-testing/templates/route-table.yaml
apiVersion: networking.gloo.solo.io/v2
kind: RouteTable
metadata:
  name: indeed-default-route-table
  namespace: ns-1
  labels:
    soa.indeed.com/route-table: grpc-mesh-1
spec:
  hosts:
    - "infra.grpc-mesh-1-gloo.service.mesh"
  http:
    - labels:
        route: default-5xx-retry
      matchers:
        - headers:
            - name: "X-Idempotency-Key"
          port: 8080
      forwardTo:
        destinations:
          - ref:
              name: grpc-mesh-reference-service
              namespace: grpc-mesh-reference-service-gloo--infra
            kind: VIRTUAL_DESTINATION
            port:
              # TODO: port name doesn't work for some reason.
              number: 8080
            subset:
              soa.indeed.com/isolated-env: infra
    - forwardTo:
        destinations:
          - ref:
              name: grpc-mesh-reference-service
              namespace: grpc-mesh-reference-service-gloo--infra
            kind: VIRTUAL_DESTINATION
            port:
              # TODO: port name doesn't work for some reason.
              number: 8080
            subset:
              soa.indeed.com/isolated-env: infra
      matchers:
        - port: 8080
      labels:
        route: default-route-with-retry
    - labels:
        route: default-5xx-retry
      matchers:
        - headers:
            - name: "X-Idempotency-Key"
          port: 8083
      forwardTo:
        destinations:
          - ref:
              name: grpc-mesh-reference-service
              namespace: grpc-mesh-reference-service-gloo--infra
            kind: VIRTUAL_DESTINATION
            port:
              # TODO: port name doesn't work for some reason.
              number: 8083
            subset:
              soa.indeed.com/isolated-env: infra
    - forwardTo:
        destinations:
          - ref:
              name: grpc-mesh-reference-service
              namespace: grpc-mesh-reference-service-gloo--infra
            kind: VIRTUAL_DESTINATION
            port:
              # TODO: port name doesn't work for some reason.
              number: 8083
            subset:
              soa.indeed.com/isolated-env: infra
      matchers:
        - port: 8083
      labels:
        route: default-route-with-retry
  workloadSelectors:
    - {}
---
# Source: scale-testing/templates/route-table.yaml
---
##
apiVersion: networking.gloo.solo.io/v2
kind: RouteTable
metadata:
  name: indeed-zones-pools-route-table
  namespace: ns-1
  labels:
    soa.indeed.com/route-table: grpc-mesh-1
spec:
  hosts:
    - "infra.grpc-mesh-1-gloo.service.mesh"
  http:
    - labels:
        route: default-5xx-retry
      matchers:
        - headers:
            - name: "X-Idempotency-Key"
          port: 8083
      forwardTo:
        destinations:
          - ref:
              name: grpc-mesh-reference-service
              namespace: grpc-mesh-reference-service-gloo--infra
            kind: VIRTUAL_DESTINATION
            port:
              # TODO: port name doesn't work for some reason.
              number: 8083
    - forwardTo:
        destinations:
          - ref:
              name: grpc-mesh-reference-service
              namespace: grpc-mesh-reference-service-gloo--infra
            kind: VIRTUAL_DESTINATION
            port:
              # TODO: port name doesn't work for some reason.
              number: 8083
      matchers:
        - port: 8083
      labels:
        route: default-route-with-retry
    - labels:
        route: default-5xx-retry
      matchers:
        - headers:
            - name: "X-Idempotency-Key"
          port: 8083
      forwardTo:
        destinations:
          - ref:
              name: grpc-mesh-reference-service
              namespace: grpc-mesh-reference-service-gloo--infra
            kind: VIRTUAL_DESTINATION
            port:
              # TODO: port name doesn't work for some reason.
              number: 8083
    - forwardTo:
        destinations:
          - ref:
              name: grpc-mesh-reference-service
              namespace: grpc-mesh-reference-service-gloo--infra
            kind: VIRTUAL_DESTINATION
            port:
              # TODO: port name doesn't work for some reason.
              number: 8083
      matchers:
        - port: 8083
      labels:
        route: default-route-with-retry
  workloadSelectors:
    - {}
---
# Source: scale-testing/templates/trim-proxy-config-policy.yaml
apiVersion: resilience.policy.gloo.solo.io/v2
kind: TrimProxyConfigPolicy
metadata:
  name: trim-proxy-policy
  namespace: ns-1
spec:
  # all services in the workspace can discover each other
  applyToWorkloads:
    - selector:
        workspace: ws-1
  config:
    includedDestinations:
    - selector:
        workspace: ws-1
---
# Source: scale-testing/templates/virtual-destination.yaml
apiVersion: networking.gloo.solo.io/v2
kind: VirtualDestination
metadata:
 name: default-virtual-destination
 namespace: ns-1
spec:
 hosts:
   - "infra.grpc-mesh-1-gloo.service.mesh"
   - "lemma.grpc-mesh-1-gloo.service.mesh"
 ports:
   - number: 8080
     protocol: HTTP
     targetPort:
       name: http
   - number: 8083
     protocol: GRPC
     targetPort:
       name: grpc
 services:
   - name: app-1
     namespace: ns-1
    #  cluster: awscmhdev
---
# Source: scale-testing/templates/workspace.yaml
apiVersion: admin.gloo.solo.io/v2
kind: Workspace
metadata:
  name: ws-1
  namespace: gloo-mesh
spec:
  workloadClusters:
  - name: '*'
    namespaces:
    - name: ns-1
---
# Source: scale-testing/templates/workspace.yaml
apiVersion: admin.gloo.solo.io/v2
kind: WorkspaceSettings
metadata:
  name: ops-team
  namespace: ops-team
spec:
  options:
    eastWestGateways:
    - selector:
        labels:
          istio: eastwestgateway
    serviceIsolation:
      enabled: false
      trimProxyConfig: false
---
# Source: scale-testing/templates/workspace.yaml
apiVersion: admin.gloo.solo.io/v2
kind: WorkspaceSettings
metadata:
  name: settings
  namespace: ws-1
spec:
# TODO figure out import/export relationships
  # importFrom:
  # - workspaces:
  #   - name: backend-apis-team
  # - workspaces:
  #   - name: ops-team
  # exportTo:
  # - workspaces:
  #   - name: '*'
  options:
    eastWestGateways:
    - selector:
        labels:
          istio: eastwestgateway
